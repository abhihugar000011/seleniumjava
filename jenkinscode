pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/abhihugar000011/seleniumjava.git'
                    ]]
                ])
            }
        }

        stage('Build with Maven') {
            steps {
                bat 'mvn clean compile'
            }
        }

        stage('Run JUnit Tests') {
            steps {
                bat 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Run All Plain Java Files') {
            steps {
                script {
                    // Find all .java files in main and test folders
                    def javaFiles = findFiles(glob: 'src/{main,test}/java/**/*.java')

                    // Exclude test files
                    def plainJavaFiles = javaFiles.findAll { file ->
                        def text = readFile(file.path)
                        return !text.contains('@Test') && !text.contains('extends TestCase')
                    }

                    if (plainJavaFiles.isEmpty()) {
                        echo "No plain Java files found to execute."
                        return
                    }

                    // Compile all plain java files
                    bat """
                        javac -cp target/classes;src/main/java;src/test/java ${plainJavaFiles.collect { it.path }.join(' ')} -d target/classes
                    """

                    // Run all plain java files
                    plainJavaFiles.each { file ->
                        def pkg = ''
                        def text = readFile(file.path)
                        def pkgMatch = text =~ /package\s+([\w\.]+);/
                        if (pkgMatch) {
                            pkg = pkgMatch[0][1] + '.'
                        }
                        def className = file.name.replace('.java', '')
                        echo "Running: ${pkg}${className}"
                        bat "java -cp target/classes ${pkg}${className}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
